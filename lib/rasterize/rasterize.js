// Generated by CoffeeScript 1.9.2
(function() {
  var address, output, page, size, statusCode, system;

  page = require('webpage').create();

  system = require('system');

  address = void 0;

  output = void 0;

  size = void 0;

  if (system.args.length < 3 || system.args.length > 7) {
    console.log('Usage: rasterize.js URL filename paperwidth*paperheight|paperformat portrait|landscape margin zoomfactor');
    console.log('  paperwidth*paperheight|paperformat examples: "5in*7.5in", "10cm*20cm", "A4", "Letter"');
    console.log('  margin examples: "1cm", "2in"');
    phantom.exit(1);
  } else {
    address = system.args[1];
    output = system.args[2];
    page.viewportSize = {
      width: 800,
      height: 800
    };
    size = system.args[3].split('*');
    page.paperSize = size.length === 2 ? {
      width: size[0],
      height: size[1],
      orientation: system.args[4],
      margin: system.args[5]
    } : {
      format: system.args[3],
      orientation: system.args[4],
      margin: system.args[5]
    };
    page.zoomFactor = Number(system.args[6]);
    statusCode = void 0;
    page.onResourceReceived = function(resource) {
      if (resource.url === address) {
        statusCode = resource.status;
      }
    };
    page.open(address, function(status) {
      var getHtmlWithStyles, paperSize, setUpHeaderOrFooter;
      setUpHeaderOrFooter = function(headerOrFooter) {
        var contents, hasHeaderOrFooter, height, typeOfContent, typeOfHeight;
        hasHeaderOrFooter = page.evaluate((function(headerOrFooter) {
          return typeof html2pdf[headerOrFooter] === 'object';
        }), headerOrFooter);
        if (hasHeaderOrFooter) {
          height = void 0;
          contents = void 0;
          typeOfHeight = page.evaluate((function(headerOrFooter) {
            return html2pdf[headerOrFooter].height && typeof html2pdf[headerOrFooter].height;
          }), headerOrFooter);
          if (typeOfHeight === 'string') {
            height = page.evaluate((function(headerOrFooter) {
              return html2pdf[headerOrFooter].height;
            }), headerOrFooter);
          } else {
            console.error('html2pdf.' + headerOrFooter + '.height has wrong type: ' + typeOfHeight);
            return phantom.exit(100);
          }
          typeOfContent = page.evaluate((function(headerOrFooter) {
            return html2pdf[headerOrFooter].contents && typeof html2pdf[headerOrFooter].contents;
          }), headerOrFooter);
          if (typeOfContent === 'string' || typeOfContent === 'function') {
            contents = phantom.callback(function(pageNum, numPages) {
              return getHtmlWithStyles(headerOrFooter, pageNum, numPages);
            });
          } else {
            console.error('html2pdf.' + headerOrFooter + '.contents has wrong type: ' + typeOfContent);
            return phantom.exit(100);
          }
          paperSize[headerOrFooter] = {
            height: height,
            contents: contents
          };
          return null;
        }
      };
      getHtmlWithStyles = function(headerOrFooter, pageNumber, totalPages) {
        return page.evaluate((function(headerOrFooter, pageNumber, totalPages) {
          var addStyle, contents, cssStr, html, i, serverResponse, styleSheet, stylesGoesBefore, superHost, xhReq;
          contents = html2pdf[headerOrFooter].contents;
          html = typeof contents === 'string' ? contents : html2pdf[headerOrFooter].contents(pageNumber, totalPages);
          html = html.replace(/\{\{pagenumber\}\}/gi, pageNumber).replace(/\{\{totalpages\}\}/gi, totalPages);
          superHost = document.createElement('div');
          superHost.innerHTML = html;
          stylesGoesBefore = superHost.firstChild;
          addStyle = function(styleStr) {
            var newStyle;
            newStyle = document.createElement('style');
            newStyle.setAttribute('type', 'text/css');
            newStyle.innerHTML = styleStr;
            stylesGoesBefore.insertBefore(newStyle);
          };
          i = 0;
          while (i < document.styleSheets.length) {
            styleSheet = document.styleSheets[i];
            if (styleSheet.ownerNode.nodeName.toLowerCase() === 'style') {
              cssStr = styleSheet.ownerNode.innerHTML;
              addStyle(cssStr);
            } else if (styleSheet.ownerNode.nodeName.toLowerCase() === 'link') {
              xhReq = new XMLHttpRequest;
              xhReq.open('GET', styleSheet.href, false);
              xhReq.send(null);
              serverResponse = xhReq.responseText;
              addStyle(serverResponse);
            }
            i++;
          }
          return superHost.outerHTML;
        }), headerOrFooter, pageNumber, totalPages);
      };
      if (status !== 'success') {
        console.error('Unable to load the address (' + statusCode + '): ' + address, status);
        return phantom.exit(100);
      } else {
        if (page.evaluate((function() {
          return typeof html2pdf === 'object';
        }))) {
          paperSize = page.paperSize;
          setUpHeaderOrFooter('header');
          setUpHeaderOrFooter('footer');
          page.paperSize = paperSize;
        }
        return window.setTimeout((function() {
          page.render(output);
          phantom.exit();
        }), 1000);
      }
    });
  }

}).call(this);
